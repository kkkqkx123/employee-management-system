version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: employee-management-postgres
    environment:
      POSTGRES_DB: employee_management
      POSTGRES_USER: employee_admin
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - employee-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U employee_admin -d employee_management"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: employee-management-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - employee-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
        VITE_API_BASE_URL: ${FRONTEND_API_URL:-http://localhost:8080/api}
        VITE_WS_URL: ${FRONTEND_WS_URL:-ws://localhost:8080}
        VITE_APP_NAME: ${APP_NAME:-Employee Management System}
        VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    container_name: employee-management-frontend
    environment:
      VITE_API_BASE_URL: ${FRONTEND_API_URL:-http://localhost:8080/api}
      VITE_WS_URL: ${FRONTEND_WS_URL:-ws://localhost:8080}
      VITE_APP_NAME: ${APP_NAME:-Employee Management System}
      VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "3000:80"
    networks:
      - employee-management-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Employee Management Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: employee-management-app
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      DATABASE_URL: jdbc:postgresql://postgres:5432/employee_management
      DATABASE_USERNAME: employee_admin
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      EMAIL_HOST: ${EMAIL_HOST:-localhost}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      FILE_UPLOAD_DIR: /app/uploads
      FILE_TEMP_DIR: /app/temp
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_temp:/app/temp
    networks:
      - employee-management-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: employee-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - employee-management-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - with-nginx

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: employee-management-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - employee-management-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: employee-management-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - employee-management-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_temp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  employee-management-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16