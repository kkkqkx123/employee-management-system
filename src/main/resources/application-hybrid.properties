# Hybrid Environment Configuration
# Employee Management System - Hybrid Development Profile (WSL PostgreSQL + Docker Redis)

# Server Configuration
server.port=8080
server.servlet.context-path=/api
server.error.include-message=on_param
server.error.include-binding-errors=on_param
server.error.include-stacktrace=on_param
server.error.include-exception=true

# PostgreSQL Database Configuration (WSL)
spring.datasource.url=jdbc:postgresql://172.30.204.139:5432/employee_management
spring.datasource.username=employee_admin
spring.datasource.password=dev_password
# 改为环境变量
# spring.datasource.url=jdbc:postgresql://${DB_HOST:172.30.204.139}:${DB_PORT:5432}/${DB_NAME:employee_management}
# spring.datasource.username=${DB_USERNAME:employee_admin}
# spring.datasource.password=${DB_PASSWORD:dev_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.pool-name=EmployeeManagementPool

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Redis Configuration (Docker)
spring.data.redis.host=${REDIS_HOST:172.17.0.3}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.database=${REDIS_DB:1}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.cache.redis.time-to-live=3600s

# JWT Configuration
jwt.secret=developmentSecretKeyNotForProduction
encryption.key=developmentEncryptionKeyNotForProduction
# JWT Configuration (use environment variables in production)
# jwt.secret=${JWT_SECRET:developmentSecretKeyNotForProduction}
# encryption.key=${ENCRYPTION_KEY:developmentEncryptionKeyNotForProduction}

# Email Configuration (Console output)
spring.mail.host=localhost
spring.mail.port=1025
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false
# Email Configuration (Console output for development)
# spring.mail.host=${MAIL_HOST:localhost}
# spring.mail.port=${MAIL_PORT:1025}
# spring.mail.username=${MAIL_USERNAME:}
# spring.mail.password=${MAIL_PASSWORD:}
# spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:false}
# spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS:false}

# Logging Configuration
logging.level.com.example.demo=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.cache=DEBUG

# Actuator Configuration
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.redis.enabled=true
management.health.db.enabled=true

# CORS Configuration (Allow all origins for development)
cors.allowed-origins=http://localhost:3000,http://localhost:5173
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true

# File Storage
file.upload.directory=./uploads/dev
file.temp.directory=./temp/dev
# file.upload.directory=${FILE_UPLOAD_DIR:/app/uploads/dev}
# file.temp.directory=${FILE_TEMP_DIR:/app/temp/dev}